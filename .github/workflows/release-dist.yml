name: Release (cargo-dist + Android APKs)

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

env:
  CARGO_TERM_COLOR: always
  RUST_TOOLCHAIN: stable
  APP_SLUG: atomberg-remote

  ANDROID_API: '36'
  ANDROID_BUILD_TOOLS: '36.0.0'
  ANDROID_NDK_VERSION: '27.0.12077973'
  ANDROID_TARGETS: 'aarch64-linux-android armv7-linux-androideabi x86_64-linux-android i686-linux-android'

jobs:
  dist:
    name: cargo-dist
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}

      - name: Cache
        uses: Swatinem/rust-cache@v2

      - name: Install cargo-dist
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-dist

      - name: Plan
        run: cargo dist plan --tag ${{ github.ref_name }} --output-format=json > dist-manifest.json

      - name: Build
        run: cargo dist build --tag ${{ github.ref_name }}

      - name: Upload built artifacts
        run: cargo dist upload --tag ${{ github.ref_name }}

      - name: Create/Update GitHub Release (notes, checksums)
        run: cargo dist announce --tag ${{ github.ref_name }} --github-token "${{ secrets.GITHUB_TOKEN }}"

  android-apks:
    name: Android APKs (all ABIs)
    runs-on: ubuntu-latest
    needs: dist
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust (Android targets)
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          targets: ${{ env.ANDROID_TARGETS }}

      - name: Cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true

      - name: Set up Android SDK/NDK
        uses: android-actions/setup-android@v3

      - name: Install Android platforms and NDK
        run: |
          yes | sdkmanager --licenses >/dev/null
          sdkmanager "platform-tools" \
                     "platforms;android-${{ env.ANDROID_API }}" \
                     "build-tools;${{ env.ANDROID_BUILD_TOOLS }}" \
                     "ndk;${{ env.ANDROID_NDK_VERSION }}"

      - name: Install cargo-apk
        run: cargo install cargo-apk --locked

      - name: Build APKs
        shell: bash
        run: |
          set -euo pipefail
          TAG="${{ github.ref_name }}"
          mkdir -p artifacts

          abi_of() {
            case "$1" in
              aarch64-linux-android) echo "arm64-v8a" ;;
              armv7-linux-androideabi) echo "armeabi-v7a" ;;
              x86_64-linux-android) echo "x86_64" ;;
              i686-linux-android) echo "x86" ;;
              *) echo "$1" ;;
            esac
          }

          for triple in ${{ env.ANDROID_TARGETS }}; do
            echo "Building for $triple"
            cargo apk build --release --target "$triple"
            OUT_DIR="target/$triple/release/apk"; [ -d "$OUT_DIR" ] || OUT_DIR="target/release/apk"
            APK_SRC=$(ls -1t "$OUT_DIR"/*.apk | head -n1)
            ABI=$(abi_of "$triple")
            DEST="artifacts/${{ env.APP_SLUG }}-${TAG}-${ABI}-unsigned.apk"
            cp "$APK_SRC" "$DEST"
            echo "Built $DEST"
          done

      - name: Decode and decrypt keystore (.asc)
        if: ${{ secrets.ANDROID_KEYSTORE_ASC && secrets.ANDROID_KEYSTORE_PASSPHRASE && secrets.ANDROID_KEY_ALIAS && secrets.ANDROID_KEYSTORE_PASSWORD && secrets.ANDROID_KEY_PASSWORD }}
        shell: bash
        run: |
          set -euo pipefail
          echo "${{ secrets.ANDROID_KEYSTORE_ASC }}" > release.keystore.asc
          gpg --batch --yes --pinentry-mode loopback --passphrase "${{ secrets.ANDROID_KEYSTORE_PASSPHRASE }}" -o release.keystore -d release.keystore.asc

      - name: Sign APKs
        if: ${{ secrets.ANDROID_KEYSTORE_ASC && secrets.ANDROID_KEYSTORE_PASSPHRASE && secrets.ANDROID_KEY_ALIAS && secrets.ANDROID_KEYSTORE_PASSWORD && secrets.ANDROID_KEY_PASSWORD }}
        env:
          KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          KS_PASS: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          KEY_PASS: ${{ secrets.ANDROID_KEY_PASSWORD }}
          BUILD_TOOLS: ${{ env.ANDROID_BUILD_TOOLS }}
        run: |
          set -euo pipefail
          for apk in artifacts/*-unsigned.apk; do
            signed="${apk%-unsigned.apk}.apk"
            "$ANDROID_SDK_ROOT/build-tools/${BUILD_TOOLS}/apksigner" sign \
              --ks release.keystore \
              --ks-key-alias "$KEY_ALIAS" \
              --ks-pass pass:"$KS_PASS" \
              --key-pass pass:"$KEY_PASS" \
              --out "$signed" \
              "$apk"
            "$ANDROID_SDK_ROOT/build-tools/${BUILD_TOOLS}/apksigner" verify "$signed"
          done

      - name: Upload APKs to release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          files: artifacts/*
          generate_release_notes: false