name: Release (cargo-dist + Android APKs)

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

env:
  CARGO_TERM_COLOR: always
  RUST_TOOLCHAIN: stable
  APP_SLUG: atomberg-remote
  ANDROID_API: "36"
  ANDROID_BUILD_TOOLS: "36.0.0"
  ANDROID_NDK_VERSION: "27.0.12077973"
  ANDROID_TARGETS: "aarch64-linux-android armv7-linux-androideabi x86_64-linux-android i686-linux-android"

jobs:
  dist:
    name: cargo-dist
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
      - name: Cache
        uses: Swatinem/rust-cache@v2
      - name: Install cargo-dist
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-dist
      - name: Plan
        run: cargo dist plan --tag ${{ github.ref_name }} --output-format=json > dist-manifest.json
      - name: Build
        run: cargo dist build --tag ${{ github.ref_name }}
      - name: Upload built artifacts
        run: cargo dist upload --tag ${{ github.ref_name }}
      - name: Create/Update GitHub Release (notes, checksums)
        run: cargo dist announce --tag ${{ github.ref_name }} --github-token "${{ secrets.GITHUB_TOKEN }}"

  android-apks:
    name: Android APKs (all ABIs)
    runs-on: ubuntu-latest
    needs: dist
    # map secrets into env so step if: checks use env.*
    env:
      ANDROID_KEYSTORE_ASC: ${{ secrets.ANDROID_KEYSTORE_ASC }}
      ANDROID_KEYSTORE_PASSPHRASE: ${{ secrets.ANDROID_KEYSTORE_PASSPHRASE }}
      ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
      ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
      ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust (Android targets)
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          targets: ${{ env.ANDROID_TARGETS }}

      - name: Cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true

      - name: Set up Android SDK/NDK
        uses: android-actions/setup-android@v3

      - name: Install Android platforms and NDK
        run: |
          sdkmanager "platform-tools" \
                     "platforms;android-${{ env.ANDROID_API }}" \
                     "build-tools;${{ env.ANDROID_BUILD_TOOLS }}" \
                     "ndk;${{ env.ANDROID_NDK_VERSION }}"

      - name: Install cargo-apk
        run: cargo install cargo-apk --locked

      - name: Prepare release keystore for cargo-apk (single alias)
        shell: bash
        env:
          KS_B64: ${{ secrets.ANDROID_KEYSTORE_JKS_B64 }} # opt. (simple)
          KS_ASC: ${{ secrets.ANDROID_KEYSTORE_ASC }} # (GPG-ASCII)
          KS_PASSPHRASE: ${{ secrets.ANDROID_KEYSTORE_PASSPHRASE }} # only if ASC is used
          KS_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          KS_PASS: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
        run: |
          set -euo pipefail
          cd "$GITHUB_WORKSPACE"

          # 1) materialize release.keystore
          if [[ -n "${KS_B64:-}" ]]; then
            printf '%s' "$KS_B64" | base64 -d > release.keystore
          elif [[ -n "${KS_ASC:-}" && "${KS_ASC}" == *"BEGIN PGP MESSAGE"* ]]; then
            if [[ -z "${KS_PASSPHRASE:-}" ]]; then
              echo "Missing ANDROID_KEYSTORE_PASSPHRASE for ASC" >&2; exit 1
            fi
            printf '%s' "$KS_ASC" > release.keystore.asc
            gpg --batch --yes --pinentry-mode loopback \
                --passphrase "$KS_PASSPHRASE" \
                --decrypt release.keystore.asc > release.keystore
            rm -f release.keystore.asc
          else
            echo "No keystore secret; generating temporary keystore for CI"
            keytool -genkeypair -noprompt \
              -alias temp-key \
              -dname "CN=CI, OU=CI, O=CI, L=Earth, S=NA, C=US" \
              -keystore release.keystore \
              -storepass changeit \
              -keypass changeit \
              -keyalg RSA -keysize 2048 -validity 10000
            echo "CARGO_APK_RELEASE_KEYSTORE=$PWD/release.keystore" >> "$GITHUB_ENV"
            echo "CARGO_APK_RELEASE_KEYSTORE_PASSWORD=changeit"     >> "$GITHUB_ENV"
            exit 0
          fi

          # 2) if alias provided and keystore has multiple entries, filter to that alias
          if [[ -n "${KS_ALIAS:-}" ]]; then
            count=$(keytool -list -keystore release.keystore -storepass "${KS_PASS:-}" 2>/dev/null | grep -c '^Alias name:')
            if [[ "$count" -gt 1 ]]; then
              echo "Keystore has $count entries; filtering to alias '$KS_ALIAS'"
              keytool -importkeystore -noprompt \
                -srckeystore release.keystore     -srcstorepass "${KS_PASS}" -srcalias "${KS_ALIAS}" \
                -destkeystore release.single.jks  -deststorepass "${KS_PASS}" -destalias "${KS_ALIAS}" -destkeypass "${KS_PASS}"
              mv release.single.jks release.keystore
            fi
          fi

          # 3) export env for cargo-apk
          if [[ -z "${KS_PASS:-}" ]]; then
            echo "ANDROID_KEYSTORE_PASSWORD must be set (store=key)" >&2; exit 1
          fi
          echo "CARGO_APK_RELEASE_KEYSTORE=$PWD/release.keystore" >> "$GITHUB_ENV"
          echo "CARGO_APK_RELEASE_KEYSTORE_PASSWORD=$KS_PASS"      >> "$GITHUB_ENV"

      - name: Build APKs (all ABIs, signed by cargo-apk)
        shell: bash
        env:
          ANDROID_TARGETS: "aarch64-linux-android armv7-linux-androideabi x86_64-linux-android i686-linux-android"
        run: |
          set -euo pipefail
          mkdir -p artifacts
          abi_of() {
            case "$1" in
              aarch64-linux-android) echo "arm64-v8a" ;;
              armv7-linux-androideabi) echo "armeabi-v7a" ;;
              x86_64-linux-android) echo "x86_64" ;;
              i686-linux-android) echo "x86" ;;
              *) echo "$1" ;;
            esac
          }
          for triple in $ANDROID_TARGETS; do
            echo "Building for $triple"
            cargo apk build --release --target "$triple"
            OUT_DIR="target/$triple/release/apk"; [ -d "$OUT_DIR" ] || OUT_DIR="target/release/apk"
            APK_SRC=$(ls -1t "$OUT_DIR"/*.apk | head -n1)
            ABI=$(abi_of "$triple")
            DEST="artifacts/${{ env.APP_SLUG }}-${{ github.ref_name || 'manual' }}-${ABI}.apk"
            cp "$APK_SRC" "$DEST"
            echo "Built $DEST"
          done

      - name: Upload APKs to release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          files: artifacts/*
          generate_release_notes: false
